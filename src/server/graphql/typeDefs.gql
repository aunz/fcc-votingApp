type Query {
  getPolls(lim: Int = 25, before: Int): [Poll!]!
  getPoll(id: Int!): Poll
  votedPolls(token: String): String
  getClientId: String!
}

type Mutation {
  createPoll(q: String!, o: [String!]!, token: String!): Int!
  loginWith(provider: String!, code: String!): LoggedInUser
  logout(token: String): Int
  votePoll(id: Int!, key: String!, token: String): Int!
  addKey(id: Int!, key: [String!]!, token: String!): Int!
}

type Poll {
  id: Int!
  uid: Int!
  ts: Int
  q: String!
  o: String!
}

# type Poll {
#   id: Int!
#   uid: Int!
#   ts: Int
#   q: String!
#   o1: [O!]!
# }

# type O {
#   k: String!
#   v: Int!
# }

type LoggedInUser {
  id: Int!
  name: String
  gh_name: String
  token: String!
}